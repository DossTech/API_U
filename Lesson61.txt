Communication: SW with SW - API

API: Set of programming code that enable data transmission between one sw pd and another
this contains the erm of the data exchange


Lesson 62:
-----------
Use of API:
===========        62/180


Vender----hit--<API

Lesson 63:
----------
Client: who want infor
Server: Provider, who process and provides the information
Medium: HTTP protocol-medium for communication-xml or json format

Lesson64:
----------
HTTP Request: packet of info sended from one com to another
              contains:Request Line
                       Header/s
                      Request Body

Request Line: Specifies method Tokens(GET,PUT....) FOLLOWED BY REQUEST uri and then
               HTTP protocol   https://jsonplaceholder.typicode.com/todos/8

Headers: has additional info abt request to server

Request Body: part of HTTP -  additonal infor to the sever


HTTP REsponse: packet of information send by server to the client in the response to earlier 
                Request made by the client
               It contains the information requested by the client
               It also contains HEader and body


Lesson:65:
------------
TEST API uses URIs  to address resources

URL: URI(Uniform Resource Identifier)+resource
    //toaddress the resource

Resource: the information returned by the server is resource

Elements:
 1.REsource: infor stored in server can be requested by client
 2.REq. identifier: we need to uniquely identify the resource i.e the complete URL
 3.Representation: A resource is the actual data. Now this data can be represented 
   as xml, HTML or may be simple text
 4.Representation Metadata: In order for the clients to specify and process a resources given in a particular rep(xml or HTML ..etc) some extra data (Metadata) needs to be passed in the request.


Composition of URI:
-------------------
   URI = scheme - HTTPs protocol
        :// - main domain
        / path  - hierarchy
       ? - query parameter
        # - parameter

----------------------------------------------------------

Lesson:66
----------
HTTP methods:
-------------
-used to perform operations with REST API

-make CURD operations possible with REST API

-HTTP GET:  to retrieve resource representation/information only - not to modify it in any way
   200
   404
   Body is optional

-HTTP POST: used to create new resource into the collectionm of resources

   If resource created response: 201
   IF not 205

-HTTP PUT: used o update the existing resource
  POST Request are made on resouse collections
  Put Request are made on single resource

-HTTP Delete:  used to delte resources
      body is optional

------------------------------------------------------------
Lesson:67
-----------
Why POSTMAN
===========
Differnt TC and TD


1.Download the postman as sw..app
2.Create an account or not    (a/c will hold the data)
3.Create workspace

------------------------------------------------------------

Lesson:68
----------
So far from 68 and 69
1.An uuid is added in the params of "GET" - -----> it was randomly generating

2.We set it as Global variable by this code in GET
   
json = pm.response.json();
pm.globals.set("uuid",json.uuid);

3.Now passing that global variable key in "POST" in
params of POST as id = {{uuid}}  or
in Body

------------------------------------------------------------

Lesson:71
-----------
Cookies Handling:
=================
1. APPLY : https://httpbin.org/cookies/set
2. In params: we apply cookies: key with value -  it is stored in postman after we save - next time when we request without these params
       server automatically recognise and send these cookies
3. Customised cookies can be created - cookies management

---------------------------------------------------------------

Lesson:72
----------
https://httpbin.org/

Account iun Trello
Trello: An online listing and webboard portal
Trello is subsidary of Atlassian

Acc Setup---->ManualHandling----API DOC
APIKey-->ToenGnenration---->ExecuteTEst


1.Go to Tello- set an account
2.Visible for TEam
3.Create a board - if needed set Theme

--------------------------------------------------------------

Lesson:73
----------
Creation of Board
===================
1.using Trello https://trello.com/w/userworkspace11071316  - With username and password
2.POST - with key and token -  we create a board in the applicationfrom Post --->"WOOOOOW"

------------------------------------------------------------------

Lesson:74:
---------

GET:
======

1.Execute POST get its id  , provide key and token
2.Validate Desc: Created for API Testing in POST
                 Statuscode
                 Text
                 Child condtent in response

pm.test("Status code is 200", function(){
    pm.response.to.have.status(200);
});

//Boardname Postman1
pm.test("Board name validation", function(){
    pm.expect(pm.response.text()).to.include("Postman1");
});

//validate the desc
pm.test("Presence of Description", function(){
json = pm.response.json();
pm.expect(json.desc).to.eql("Created for API Testing");
});

//Validating the cardAging is regular
pm.test("Validating the card aging of the board",function(){
    json = pm.response.json();
    pm.expect(json.prefs.cardAging).to.eql("regular");
});

----------------------------------------------------------------
Lesson:75
---------
Manage TEst Script by like this:
====================================
advantages:
1.One time declaration
2.Less amount of memory required
3.Faster execution
4.Used for multiple assertions

pm.test("Status code is 200", function(){
    pm.response.to.have.status(200);
});

const json = pm.response.json();                <===============================observe

//Boardname Postman1
pm.test("Board name validation", function(){
    pm.expect(pm.response.text()).to.include("Postman1");
});

//validate the desc
pm.test("Presence of Description", function(){
//json = pm.response.json();
pm.expect(json.desc).to.eql("Created for API Testing");
});

//Validating the cardAging is regular
pm.test("Validating the card aging of the board",function(){
   // json = pm.response.json();
    pm.expect(json.prefs.cardAging).to.eql("regular");
});

console.log(json);
-------------------------------------------------------------

Lesson:76
-----------

Variable: Used to store the data

Used to store and resue values in your requests and scripts

Postman supports variables at different scopes

       global
 ----------------------
     collection
-----------------------
     environment
-----------------------
        data
-----------------------
        local
-----------------------

-> used to store and reuse values in your response and scripts
-> postman supports variables at different scopes

Global:
--------
  -accessable between collectins, requests, tstscripts and environments.
  -global variables are available throughtout a workplace

Collection:
-----------
 -available throughout the requests in collection and are independet of environmen
 - don't change neviornment

Environment:
------------
 -allows to tailor your process to different environemnts
 -eg local or deve or testing
 - onlyone active ata a time

local:
------
 -temporary variables - only in the request script

data:
------
 -come from external CSV and JSON files 
 - used to running collection via NEWman or Collection Runner

-------------------------------------------------------------------

Lesson:77
----------
Usage of Global variable 
=========================
1.Declare it  to the right of the "environment"
2.Assign the values
3.Declare in params - key with {{name}}

------------------------------------------------------------------

Lesson:78
------------
//Trello POST:-
POST  https://{{base_uri}}/1/boards?name=Postman1&key={{trelloauthkey}}&token={{trelloauthtoken}}
//Trello GET: https://{{base_uri}}/1/boards/ZEAuTRO6?key={{trelloauthkey}}&token={{trelloauthtoken}}&id=ZEAuTRO6

pm.test("Status code is 200", function(){
    pm.response.to.have.status(200);
});

const json = pm.response.json();

//Boardname Postman1
pm.test("Board name validation", function(){
    pm.expect(pm.response.text()).to.include("Postman1");
});

//validate the desc
pm.test("Presence of Description", function(){
//json = pm.response.json();
pm.expect(json.desc).to.eql("Created for API Testing");
});

//Validating the cardAging is regular
pm.test("Validating the card aging of the board",function(){
   // json = pm.response.json();
    pm.expect(json.prefs.cardAging).to.eql("regular");
});

console.log(json);
////////////////////////////////////////////////////////////////////////////////////////////
GET LIST ON BOARD:
===================
i.e TO DO, DO ....

1."Get lists on Board"   from reference of Trello developer site - apply the Global variables(1,2,3)
2.Assertion:
pm.test("Status code is 200", function(){
    pm.response.to.have.status(200);
    });

const json = pm.response.json();

//validating the name of first list: List1
pm.test("Validating the Name of card1:");
pm.expect(json[0].name).to.eql("To Do");

//validating the name of first list: List2
pm.test("Validating the Name of card2:")
pm.expect(json[1].name).to.eql("Doing");

//validating the name of first list: List3
pm.test("Validating the Name of card3:")
pm.expect(json[2].name).to.eql("Done");

3.Generation of cards: POST
   we need to give :  key,token, id of the boards(doing),name

4.Asserting the Id of the Card: To DO -  in POST(create card)
             status code, List ID

pm.test("Validating the status code is 200", function () {
    pm.response.to.have.status(200);
});

const json = pm.response.json();

pm.test("Validating the IdList", function () {
    pm.expect(json.idList).to.eql("67ac4858919d55b6a81b759f");
});


5.Setting the List 2(To DO) id as global in "Get List" so accessable in POST- create card
//setting the Second List id global
pm.globals.set("list2_id",json[1].id);

6.Setting in params of create card(in To do) globally {{list2_id}}

7.Asserting the id in POST(cretion of card) as

//pm.test("Validating the IdList", function () {
 //   pm.expect(json.idList).to.eql("67ac4858919d55b6a81b759f");
//});
//instead of above
pm.test("Validating the IdList", function () {
    pm.expect(json.idList).to.eql(pm.globals.get("list2_id"));
});

=============================
POST:CREATE A BOARD
GET:get board
GET:get board list
POST:create card

------------------------------------------------------------------

Lesson:79-80
-----------

 EnvironmentalVariable

https://developer.atlassian.com/cloud/trello/rest/api-group-cards/#api-cards-post

---------------------------------------------------------------------

Lesson:81
----------
Need for Pre-requsit:
=====================

1.Setting Board name in POST: Create board===========>prerequisit test
const boardname = "Automation Sprint"+ parseInt(Math.random)*100;
pm.environment.set("noard_name",boardname);

2.Now Validating the boardname and unsetting the board name in POST: Create board===>postrequisit test

//Boardname Automation Sprint
pm.test("Board name validation", function(){
    pm.expect(json.name).to.eql(pm.environment.get("boardname"));
});

pm.environment.unset("board_name")

/// for the above we need to delete all the boards only the it will be crated
-----------------------------------------------------------------------

Lesson:82
-----------
Practise session: Creation of Github account
<82-*84>

Use: dummy github account
go to github developer api docu
fetch git of an account with username
fetch an account fo an usernmae with "Bearer token"

Place the authentication at collection level.... easy for the forcoming requests- having inheritanc3

------------------------------------------------------------------------

Lesson:83-100(TestNG)
----------------------
https://github.com/anshulc55/JavaTraining/tree/master/MyTestNGProject/src/com/testng

85-100 All about TestNG

-------------------------------------------------------------------------

Lesson:101
-----------

Rest Assured enabled to test REST APIs using java libraries and integrates well with Maven

Rest Assured, helpful in API Testing and API TEsting Automation Workflow

Requirement of the Setup:
  1.Java
  2.Eclipse IDE
  3.Rest Assured libs

//pom:    (fromhttps://github.com/rest-assured/rest-assured/wiki/GettingStarted)
-------
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.udemy.com</groupId>
  <artifactId>RestAPI</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <dependencies>
  <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>5.5.0</version>
      <scope>test</scope>
</dependency>

<dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>json-path</artifactId>
      <version>5.5.0</version>
      <scope>test</scope>
</dependency>

<dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>xml-path</artifactId>
      <version>5.5.0</version>
      <scope>test</scope>
</dependency>

<dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>json-schema-validator</artifactId>
      <version>5.5.0</version>
      <scope>test</scope>
</dependency>

<dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>spring-mock-mvc</artifactId>
      <version>5.5.0</version>
      <scope>test</scope>
</dependency>

<dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>spring-web-test-client</artifactId>
      <version>5.5.0</version>
      <scope>test</scope>
</dependency>

<dependency>
    <groupId>io.rest-assured</groupId>
    <artifactId>scala-support</artifactId>
    <version>5.5.0</version>
    <scope>test</scope>
</dependency>

<dependency>
    <groupId>io.rest-assured</groupId>
    <artifactId>kotlin-extensions</artifactId>
    <version>5.5.0</version>
    <scope>test</scope>
</dependency>
  </dependencies></project>

------------------------------------------------------------

Lesson:102 - Project location

https://github.com/anshulc55/RestAssured_Automation

----------------------------------------------------------

Lesson:103: 
------------
https://github.com/anshulc55/Rest_Assured_Code/blob/master/SampleRestAssured/src/rest/basic/testing/GetRequestSample.java
https://github.com/anshulc55/Rest_Assured_Code/blob/master/SampleRestAssured/src/rest/basic/testing/GetRequestSample.java


creation of project and asserting this

package basic.rest.getcall;

import io.restassured.RestAssured;
import io.restassured.RestAssured.*;
import static  io.restassured.RestAssured.*;
public class Trello1 {

	public static String baseURI = "https://api.trello.com";
	
	public static void main(String[] args) {
		
		RestAssured.baseURI=baseURI;
		
		given().param("key", "*******").
		             param("token", "*******").
		
        when().
                      get("/1/boards/cifNpKPv").
            
        then().
                      assertThat().statusCode(200);
		
		System.out.println("Asserted");

	}
}

--------------------------------------------------------------------
Essential imports
====================

import io.restassured.RestAssured;
import io.restassured.http.ContentType;

import static io.restassured.RestAssured.*;

import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
-------------------------------------------------------------------------

Lesson:104
-----------Validating the REsponse using REst Assured

package basic.rest.getcall;

import io.restassured.RestAssured;
import io.restassured.RestAssured.*;
import io.restassured.http.ContentType;

import static  io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;
public class Trello1 {

	public static String baseURI = "https://api.trello.com";
	
	public static void main(String[] args) {
		
		RestAssured.baseURI=baseURI;
		
		given().param("key", "********").
		             param("token", "*******").
		
        when().
                      get("/1/boards/cifNpKPv").
            
        then().
                      assertThat().statusCode(200).and().
                      contentType(ContentType.JSON).and().
                      body("name", equalTo("Postman1")).and().
                      body("desc",equalTo("Created for API Testing"));
		
		System.out.println("First Automation call");
		System.out.println("Get call, Executed Successfully");

	}
}
----------------------------------------------------------------------------------------------------------
Lesson:105
-----------Verifying the Response header and Response body

package basic.rest.getcall;
import io.restassured.RestAssured;
import io.restassured.RestAssured.*;
import io.restassured.http.ContentType;
import static  io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;

import org.testng.annotations.Test;

public class Trello2VerifResponse {

	@Test
	public void verifyResponseBody() {
	
		
	
	RestAssured.baseURI="https://api.trello.com";
		
		given().param("key", "*****").
		             param("token", "*******").
		
        when().
                      get("/1/boards/cifNpKPv").
            
        then().
                      assertThat().statusCode(200).and().
                      contentType(ContentType.JSON).and().
                      body("name", equalTo("Postman1")).and().
                      body("desc",equalTo("Created for API Testing"));
		
		System.out.println("First Automation call");
		System.out.println("Get call, Executed Successfully");

	}
	@Test
	public void verifyResponseHeader() {
	
		
	
	RestAssured.baseURI="https://api.trello.com";
		
		given().param("key", "*******").
		             param("token", "*******").
		
        when().
                      get("/1/boards/cifNpKPv").
            
        then().
                      assertThat().statusCode(200).and().
                      contentType(ContentType.JSON).and().
                     header("Referrer-Policy","strict-origin-when-cross-origin").and().
                     header("X-Dns-Prefetch-Control", "off");
		
		System.out.println("First Automation call");
		System.out.println("Get call, Executed Successfully");

	}
}

//Ttry to practise like this with many testcases widely
-------------------------------------------------------------------------------------------------

Lesson:107
-----------Automating Post Request without body

package basic.rest.postcall;
import io.restassured.RestAssured;
import io.restassured.RestAssured.*;
import io.restassured.http.ContentType;
import static  io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;
import org.testng.annotations.Test;

public class PostCallAutomation {

	@Test
	public void creatingBoard() {


		RestAssured.baseURI="https://api.trello.com";

		String board_name = "My Board for API"+(int)(Math.random() * 100);
		System.out.println(board_name);


		given().queryParam("name",board_name).and().
		queryParam("key", "**********").and().
		queryParam("token", "*****************").and().
        header("Content-Type", "application/json").
		
		when().
		post("1/boards").

		then().
		assertThat().statusCode(200).and().
		contentType(ContentType.JSON).and().
		body("name", equalTo(board_name));
		

		System.out.println("First Automation call");
		System.out.println("Get call, Executed Successfully");

	}

}

------------------------------------------------------------------------------------------------------

Lesson:108
-----------Body Data in Post Request

//creation of repo ....not creating now using pstman

Creat an rep: name = APIlearing1

//using Eclipse we have create a repository

Creat an rep: name = APIlearing2


package basic.rest.postcall;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;

import static io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;

import org.testng.annotations.Test;

public class CreateGithubRepo {

	@Test
	public void createRepo() {

		RestAssured.baseURI = "https://api.github.com";
		String bearerToken = "*************";

		System.out.println("Starting Create Repo Test Case");

		given().header("Content-Type","application/json")
		.header("Authorization", " Bearer " +bearerToken)
		//passing the body not the params - that the difference          <==========================Observe
		.body("{\r\n"
				+ "    \"name\":\"APILearning2\",\r\n"
				+ "    \"description\":\"FirstAPILearning2\"\r\n"
				+ "}").
		when()
		.post("/user/repos").

		then().assertThat().statusCode(201).and().
		contentType(ContentType.JSON).and().
		body("name", equalTo("APILearning2")).and().
		body("description", equalTo("FirstAPILearning2"));

		System.out.println("Completed Create Repo Test Case");
	}
}

=============================================================================

Lesson:109/180 *****************************************************************IMPORTANTIMPORTANTIMPORTANTIMPORTANT
===========Extract response and validation

package basic.rest.postcall;
//Extracting Github REsponse and validating it
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

import static io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;

import org.testng.annotations.Test;
public class ExtractGithubResponse {


	@Test
	public void validatingGithubResponse() {

RestAssured.baseURI = "https://api.github.com";
String bearerToken = "**********";
String requestbody =  "{\r\n"
		+ "    \"name\":\"APILearning3\",\r\n"
		+ "    \"description\":\"FirstAPILearning3\"\r\n"
		+ "}";


Response response = given().
             header("Content-Type", "application/json")
            .header("Authorization", "Bearer " +bearerToken)
            .body(requestbody).
            
 when().post("/user/repos").
 
 then().assertThat().statusCode(201).and().
            contentType(ContentType.JSON).
             extract().response();

String jsonResponse = response.asString();

JsonPath responseBody = new JsonPath(jsonResponse);

System.out.println("Name: "+ responseBody.get("name"));
System.out.println("Node Id: "+ responseBody.get("node_id"));
System.out.println("Id: "+ responseBody.get("id"));
	}
	
	
}
==================================================================================================

Lesson:110
===========End to End Case Automation

package basic.rest.postcall;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

import static io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;
import org.testng.annotations.Test;

public class EndToEndCallReq {

	public String baseuri = "https://api.github.com";
	public String bearerToken = "*****************";
		public String repoName;


	@Test
	public void creatingRepo() {

		RestAssured.baseURI = baseuri;
		String requestBody = "{\r\n"
				+ "    \"name\":\"APILearning5\",\r\n"
				+ "    \"description\":\"FirstAPILearning5\"\r\n"
				+ "}";


		Response response = given()
				.header("Content-Type","application/json")
				.header("Authorization", "bearer "+ bearerToken)
				.body(requestBody).

		when()
		        .post("/user/repos").

		then().assertThat()
				.statusCode(201).and()
				.contentType(ContentType.JSON)
				.extract().response();

		String jsonResponse = response.asString();

		JsonPath responseBody = new JsonPath(jsonResponse);
	
		System.out.println("Id: "+ responseBody.get("id"));
		System.out.println("Name : "+ responseBody.get("name"));
		System.out.println("Node Id: "+ responseBody.get("node_id"));
		System.out.println("Full Name: "+ responseBody.get("full_name"));

		

		repoName = responseBody.get("full_name");
	//	System.out.println("The Creation of Repo: "+repoName);
	}


	@Test
	public void deletingRepo() {

		RestAssured.baseURI = baseuri;
		
		given().
		header("Content-Type","application/json").
		header("Authorization", "Bearer "+ bearerToken).
		
		when().
		delete("/repos/"+repoName).  //repos/{owner}/{repo}
		
		then().assertThat().statusCode(204);
		
		System.out.println("The Deletion of Repo: "+repoName);
	}
}

================================================================================

Lesson:111 
-----------Exploring Native loggin

got to github restapi wiki->we can see the log generation codes there......

================================================================================

Lesson:112
-----------understanding the complex json

Json Array: nested json

Lesson:113
----------Handling Json Array

package basic.rest.jsonresvalidation;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

import static io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;
import org.testng.annotations.Test;

public class JjsonAarrayHandling {

	@Test
	public void verifyResponseBody() {
		
		RestAssured.baseURI = "https://api.trello.com";
		
		Response response = given().
			param("key","***").
			param("token","***").

		when().
			get("/1/boards/cifNpKPv").
		
		then().assertThat().statusCode(200).and().
	     	contentType(ContentType.JSON).and().
	        extract().response();
		
		String jsonResponse = response.asString();
	    JsonPath responseBody = new JsonPath(jsonResponse);
	    
	    System.out.println("Name: " + responseBody.get("name"));
	    System.out.println("Background: " + responseBody.get("prefs.background"));
	    System.out.println("Background: " + responseBody.get("prefs.backgroundImageScaled[4].width"));
	}
}

==========================================================================================================

Lesson:114 : 
------------Iterating Json Array over the response

package basic.rest.jsonresvalidation;


import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

import static io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;
import org.testng.annotations.Test;
import org.testng.annotations.Test;

public class IterationJasonArray {

	
	@Test
	public void itteratingJjsonElements() {
		

		RestAssured.baseURI = "https://api.trello.com";
		
		Response response = given().
			param("key","**").
			param("token","**").

		when().
			get("/1/boards/cifNpKPv").
		
		then().assertThat().statusCode(200).and().
	     	contentType(ContentType.JSON).and().
	        extract().response();
		
		String jsonResponse = response.asString();
	    JsonPath responseBody = new JsonPath(jsonResponse);
	    
	//    System.out.println("Name: " + responseBody.get("name"));
	//    System.out.println("Background: " + responseBody.get("prefs.background"));
	//    System.out.println("Background: " + responseBody.get("prefs.backgroundImageScaled[4].width"));
	    
	  int bgsize = responseBody.getInt("prefs.backgroundImageScaled.size()");
	  
	  for (int i = 0; i <bgsize; i++) {
		
	int width = responseBody.getInt("prefs.backgroundImageScaled["+i+"].width");
	int height = responseBody.getInt("prefs.backgroundImageScaled["+i+"].height");
	
	System.out.println("BackgroundImageScaled array no "+ i + " Width: "+ width + " height: "+ height);
		  
	}

	}
}

================================================================================================================
Lesson:115-116
-----------Serialization and Deserialization


Serialization: process of converting objects into stream of data

POJO: used for creating JSOM,XML payloads for API

Dependencies:
            1.Jackson-databinder
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.18.2</version>
</dependency>

            2.json-simple

<dependency>
    <groupId>com.googlecode.json-simple</groupId>
    <artifactId>json-simple</artifactId>
    <version>1.1.1</version>
</dependency>


Steps
-----
Deserialization 

Serialization

package basic.rest.serialdeserial;

import org.testng.annotations.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
//Conversion of JavaObject into JSON payload
public class Seerialization {

	@Test
	//Serialization
	public void createDataFromPojo() throws JsonProcessingException {

		//Creation of object for POJO Class
		SamplePOJO employee = new SamplePOJO();

		employee.setFirstName("FirstName1");
		employee.setLastName("LastName1");
		employee.setCompany("Company1");
		employee.setAge(1);
		employee.setSalary(100000);
		employee.setMarriage(false);

		//converting the Java object into JASON payload as String
		ObjectMapper objectMapper = new ObjectMapper();
		//Create an ObjectWriter instance with pretty print formatting: 
		//Convert the employee object into a JSON string
		String employeeJSON = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(employee);  
		System.out.println(employeeJSON);
	}
	
	@Test
	//Deserialization
	public void getPojoFromObject() throws JsonProcessingException {
		SamplePOJO employee = new SamplePOJO();

		employee.setFirstName("FirstName2");
		employee.setLastName("LastName2");
		employee.setCompany("Company2");
		employee.setAge(2);
		employee.setSalary(200000);
		employee.setMarriage(true);

		//converting the Java object into JASON payload as String
		ObjectMapper objectMapper = new ObjectMapper();
		//Create an ObjectWriter instance with pretty print formatting: 
		//Convert the employee object into a JSON string
		String employeeJSON = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(employee);  
		
		//converting JSON String into Class object
		SamplePOJO employeeObject = objectMapper.readValue(employeeJSON, SamplePOJO.class);
		System.out.println("Employee Firstname: "+employeeObject.getFirstName());
		System.out.println("Employee Lastname: "+employeeObject.getLastName());
		System.out.println("Employee Company: "+employeeObject.getCompany());
		System.out.println("Employee Age: "+employeeObject.getAge());
		System.out.println("Employee Salary: "+employeeObject.getSalary());
		System.out.println("Employee MarriageStatus: "+employeeObject.isMarriage());

	}
}


============================================================================================================

Lesson:117
------------POJO Class for JSON Array payload

package basic.rest.serialdeserial;

import java.util.ArrayList;
import java.util.List;

import org.testng.annotations.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class JjsonAarraySerialization {

	public String completeJson;

	@Test
	public void createJasonArrayFromPojo() throws JsonProcessingException {

		List<SamplePOJO1> l1 = new ArrayList<SamplePOJO1>();

		SamplePOJO1 employee1 = new SamplePOJO1();
		employee1.setFirstName("FirstName1");
		employee1.setLastName("LastName1");
		employee1.setCompany("Company1");
		employee1.setAge(1);
		employee1.setSalary(100000);
		employee1.setMarriage(false);

		SamplePOJO1 employee2 = new SamplePOJO1();
		employee2.setFirstName("FirstName2");
		employee2.setLastName("LastName2");
		employee2.setCompany("Company2");
		employee2.setAge(2);
		employee2.setSalary(200000);
		employee2.setMarriage(true);

		SamplePOJO1 employee3 = new SamplePOJO1();
		employee3.setFirstName("FirstName3");
		employee3.setLastName("LastName3");
		employee3.setCompany("Company3");
		employee3.setAge(3);
		employee3.setSalary(300000);
		employee3.setMarriage(true);

		//inserting the Java objects(employe1,2,3) inside the List l1
		l1.add(employee1);
		l1.add(employee2);
		l1.add(employee3);

		//converting Java objects into JASONpayload
		ObjectMapper objectMapper = new ObjectMapper();
		completeJson = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(l1);
		System.out.println(completeJson);
	}

	@Test
	public void creatingPojoObjectFromJson() throws JsonMappingException, JsonProcessingException {

		ObjectMapper objectMapper = new ObjectMapper();
		List<SamplePOJO1> allemployees = objectMapper.readValue(completeJson, new TypeReference<List<SamplePOJO1>>() {});

		for (SamplePOJO1 employee : allemployees) {
			System.out.println("<====================================>");	
			System.out.println("Employee Firstname: "+employee.getFirstName());
			System.out.println("Employee Lastname: "+employee.getLastName());
			System.out.println("Employee Company: "+employee.getCompany());
			System.out.println("Employee Age: "+employee.getAge());
			System.out.println("Employee Salary: "+employee.getSalary());
			System.out.println("Employee MarriageStatus: "+employee.isMarriage());

			System.out.println("<====================================>");	
		}
	}
}
=================================================================================================================

Lesson:118
-----------PojoClassOfNestedJSONPAYLOAD

package basic.rest.nestedjsonpayload;

import java.util.ArrayList;
import java.util.List;

import org.testng.annotations.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class CreateNestedJsonFromPOJO {

	//Creation of object for CompanyDetailsPOJO Class

	@Test
	public void generatePojoData() throws JsonProcessingException {
		CompanyDetails nestedPojo = new CompanyDetails();
		nestedPojo.setCompanyName("DossTech");
		nestedPojo.setCompanyHOCity("Chennai");
		nestedPojo.setCompanyCEO("Doss");


		List<String> supportedSalaryBanks = new ArrayList<String>();
		supportedSalaryBanks.add("HDFC");
		supportedSalaryBanks.add("ICICI");
		supportedSalaryBanks.add("AXIS");
		nestedPojo.setSupportedSalaryBanks(supportedSalaryBanks);

		//From PFDetails Class
		List<Integer> pinCodesOfCityOffice = new ArrayList<Integer>();
		pinCodesOfCityOffice.add(600001);
		pinCodesOfCityOffice.add(600002);
		pinCodesOfCityOffice.add(600003);
		nestedPojo.setPinCodesOfCityOffice(pinCodesOfCityOffice);


		//From Employee POJO Class
		Employees employees1 = new Employees();
		employees1.setFirstName("FirstName1");
		employees1.setLastName("LastName1");
		employees1.setGender("Male");
		employees1.setAge(35);
		employees1.setSalary(100000);
		employees1.setMarried(false);


		Employees employees2 = new Employees();
		employees2.setFirstName("FirstName2");
		employees2.setLastName("LastName2");
		employees2.setGender("Male");
		employees2.setAge(35);
		employees2.setSalary(200000);
		employees2.setMarried(false);

		Employees employees3 = new Employees();
		employees3.setFirstName("FirstName3");
		employees3.setLastName("LastName3");
		employees3.setGender("Male");
		employees3.setAge(35);
		employees3.setSalary(300000);
		employees3.setMarried(false);

		List<Employees> employee = new ArrayList<Employees>();
		employee.add(employees1);
		employee.add(employees2);
		employee.add(employees3);
		nestedPojo.setEmployee(employee);

		//From Contractors POJO Class
		Contractors contractor1 = new Contractors();
		contractor1.setFirstName("Qeagle");
		contractor1.setLastName("TestLeaf");
		contractor1.setContractFrom("2023");
		contractor1.setContractTo("2024");

		Contractors contractor2 = new Contractors();
		contractor2.setFirstName("MSC");
		contractor2.setLastName("Shipping");
		contractor2.setContractFrom("2024");
		contractor2.setContractTo("2025");

		List<Contractors> contractors = new ArrayList<Contractors>();
		contractors.add(contractor1);
		contractors.add(contractor2);
		nestedPojo.setContractors(contractors);

		//From PFDetailsPOJOClass		
		/*
		  private String pfName;
	private String pfCity;
	private int pfYear;
	private int noOfEmployees;
		 */

		PFDetails pf1 = new PFDetails();
		pf1.setPfName("Emp1");
		pf1.setPfCity("Chennai");
		pf1.setPfYear(2025);	
		pf1.setNoOfEmployees(18);
		nestedPojo.setCompanyPFDetails(pf1);

		//
		ObjectMapper objectMapper = new ObjectMapper();
		String nestedPayLoad = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(nestedPojo);
		System.out.println(nestedPayLoad);
	}

}
==================================================================================================================

Lesson:119
-----------RoadMap for Framework Design pattern


Automation Framework: 
---------------------
      Its not a single tool or process
      Its a collection of tools and processes working together to support 
               automated testing of any application
      It intergate various functions like libraries, testdatas, varioous reusable modules

Why we need Automation Framework?
----------------------------------
1.Maintain a well defined strategy across the test suties
2.Enhanced speed at which testing progress
3.Maintain the test code will be easy
4.The URL or Application can be tested accurately
5.Continuous testing of coding and delivery will be achieved

Types of Automation Framework
--------------------------------
1.Linear Automation Framework
2.Modular Drivern Framework
3.Behaviour Drivern Framework
4.DataDriven Framework
5.Keyword Driven Framework
6.hybrid Testing Framework

Framework Components
--------------------
1.CoreJAva
TestNG - Execution of TEsts
Rest Assured - Rest API
Build Tools - For builds Preparation
Jenkins-CI
Log4j - Logging
Reporting - Extent and Surefire

-----------------------------------------------------------------------------------------------------

Section:24
Lesson:120
-----------Project Code Location
https://github.com/anshulc55/RestAssured_Automation

---------------------------------------------------------------------
Lesson:121
---------- Loggin introduction

LOG4j:
------
	fast,flexible and reliable logging framework written in java

Why Log4j?
----------

       Opensource - written in java
 	store flow details in database or file

PrincipleComponents
--------------------
	Loggers
	Appender
	Layout

Loggers:
---------responsibelfor loggin info
All - log each and every thing
DEBUG
INFO
WARN
ERROR
FATAL
OFF

Appenders
---------- deliver the info to destination
Console
File
Rolling

Layout
------------formatting log info

--------------------------------------------------------------
Lesson:122
-----------
121 to 124 - log4j informations and configurations


----------------------------------------------------------------
Section:25
------------
Lesson:125
-----------






























